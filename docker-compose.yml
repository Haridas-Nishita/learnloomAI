version: '3.8'

services:
  # Main AI Learning Platform Application
  ai-learning-app:
    build: .
    container_name: ai-learning-platform
    ports:
      - "8501:8501"
    environment:
      # Load from .env file
      - GROQ_API_KEY=${GROQ_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - DESCOPE_PROJECT_ID=${DESCOPE_PROJECT_ID}
      - DESCOPE_MANAGEMENT_KEY=${DESCOPE_MANAGEMENT_KEY:-}
      - CEQUENCE_API_ENDPOINT=${CEQUENCE_API_ENDPOINT:-https://api.cequence.ai}
      - CEQUENCE_API_KEY=${CEQUENCE_API_KEY:-}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_TIMEOUT_HOURS=${SESSION_TIMEOUT_HOURS:-24}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-learning-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-learning.rule=Host(`ai-learning.yourdomain.com`)"
      - "traefik.http.routers.ai-learning.tls=true"
      - "traefik.http.routers.ai-learning.tls.certresolver=letsencrypt"

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: ai-learning-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    networks:
      - ai-learning-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai-learning-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ai-learning-app
    restart: unless-stopped
    networks:
      - ai-learning-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-learning-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - ai-learning-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-learning-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ai-learning-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ai-learning-network:
    driver: bridge